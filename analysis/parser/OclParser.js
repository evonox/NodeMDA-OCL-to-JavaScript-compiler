/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { OCL: peg$parseOCL, oclExpression: peg$parseoclExpression },
      peg$startRuleFunction  = peg$parseOCL,

      peg$c0 = function(data) { return data; },
      peg$c1 = function(path, contexts) {
          return {
              type: "package",
              path: path,
              contexts: contexts
          }
      },
      peg$c2 = function(first, data) { return data; },
      peg$c3 = function(first, other) { return [first].concat(other);  },
      peg$c4 = function(context, rules) {
          return {
              type: "context",
              contextHeading: context,
              rules: rules
          }
      },
      peg$c5 = function(path, operationDeclaration) { 
          return { 
              //contextName: name, 
              elementPath: path,
              operationDeclaration: operationDeclaration
          }
      },
      peg$c6 = function(params) { return params; },
      peg$c7 = function(params, returnType) {
          return {
              parameters: params === null ? [] : params,
              returnType: returnType
          }
      },
      peg$c8 = function(first, param) { return param; },
      peg$c9 = function(first, other) {
          return [first].concat(other);
      },
      peg$c10 = function(paramName, paramType) {
          return {
              parameterName: paramName,
              parameterType: paramType
          }
      },
      peg$c11 = function(contextName) { return contextName; },
      peg$c12 = function(ruleType, ruleName, ruleBody) {
          return {
              ruleName: ruleName === null ? "": ruleName,
              ruleType: ruleType,
              ruleBody: ruleBody
          }
      },
      peg$c13 = function(left, term) { return attachLeft(left, term); },
      peg$c14 = function(term) { return binOp("implies", term, null); },
      peg$c15 = function(term) { return binOp("xor", term, null); },
      peg$c16 = function(term) { return binOp("or", term, null); },
      peg$c17 = function(term) { return binOp("and", term, null); },
      peg$c18 = function(term) { return binOp("equal", term, null); },
      peg$c19 = function(term) { return binOp("notEqual", term, null); },
      peg$c20 = function(term) { return binOp("less", term, null); },
      peg$c21 = function(term) { return binOp("greater", term, null); },
      peg$c22 = function(term) { return binOp("lessOrEqual", term, null); },
      peg$c23 = function(term) { return binOp("greaterOrEqual", term, null); },
      peg$c24 = function(leftTerm, term) { // TODO Complete last Expr 
              var left = { operator: "negate", "left": leftTerm };
              if(term === null)  return left; else { term.left = left; return term; }
          },
      peg$c25 = function(term, subtree) { return binOp("add", term, subtree); },
      peg$c26 = function(term, subtree) { return binOp("sub", term, subtree); },
      peg$c27 = function(term, subtree) { return binOp("mult", term, subtree); },
      peg$c28 = function(term, subtree) { return binOp("div", term, subtree); },
      peg$c29 = function(left) { return { operator: "not", left: left }; },
      peg$c30 = function(left) { return { operator: "negate", left: left }; },
      peg$c31 = function(left) { return { operator: "pre", left: left }; },
      peg$c32 = function(condition, thenExpr, elseExpr) {
              return {
                  operator: "if",
                  condition: condition,
                  thenExpression: thenExpr,
                  elseExpression: elseExpr
              }
          },
      peg$c33 = function(left) {
          return {
              operator: "parenthesis",
              left: left
          }
      },
      peg$c34 = function(functions) {
          for(let i = 1; i < functions.length; i++) {
              functions[i].firstArgument = functions[i - 1];
          }
          return {
              first: functions[0],
              last: functions[functions.length - 1]
          };
      },
      peg$c35 = function(functionName, args) {
          return {
              firstArgument: null,
              termType: "builtInFunction",
              builtInFunction: functionName,
              args: args
          }
      },
      peg$c36 = function(functionName, args) {
          return {
              firstArgument: null,
              termType: "collectionFunction",
              builtInFunction: functionName,
              args: args
          }
      },
      peg$c37 = "oclIsUndefined",
      peg$c38 = peg$literalExpectation("oclIsUndefined", false),
      peg$c39 = "mod",
      peg$c40 = peg$literalExpectation("mod", false),
      peg$c41 = "div",
      peg$c42 = peg$literalExpectation("div", false),
      peg$c43 = "abs",
      peg$c44 = peg$literalExpectation("abs", false),
      peg$c45 = "max",
      peg$c46 = peg$literalExpectation("max", false),
      peg$c47 = "min",
      peg$c48 = peg$literalExpectation("min", false),
      peg$c49 = "round",
      peg$c50 = peg$literalExpectation("round", false),
      peg$c51 = "floor",
      peg$c52 = peg$literalExpectation("floor", false),
      peg$c53 = "concat",
      peg$c54 = peg$literalExpectation("concat", false),
      peg$c55 = "size",
      peg$c56 = peg$literalExpectation("size", false),
      peg$c57 = "toLower",
      peg$c58 = peg$literalExpectation("toLower", false),
      peg$c59 = "toUpper",
      peg$c60 = peg$literalExpectation("toUpper", false),
      peg$c61 = "toInteger",
      peg$c62 = peg$literalExpectation("toInteger", false),
      peg$c63 = "toReal",
      peg$c64 = peg$literalExpectation("toReal", false),
      peg$c65 = "substring",
      peg$c66 = peg$literalExpectation("substring", false),
      peg$c67 = function(functionName) { return functionName; },
      peg$c68 = "asSet",
      peg$c69 = peg$literalExpectation("asSet", false),
      peg$c70 = "asOrderedSet",
      peg$c71 = peg$literalExpectation("asOrderedSet", false),
      peg$c72 = "asBag",
      peg$c73 = peg$literalExpectation("asBag", false),
      peg$c74 = "asSequence",
      peg$c75 = peg$literalExpectation("asSequence", false),
      peg$c76 = "flatten",
      peg$c77 = peg$literalExpectation("flatten", false),
      peg$c78 = "includesAll",
      peg$c79 = peg$literalExpectation("includesAll", false),
      peg$c80 = "excludesAll",
      peg$c81 = peg$literalExpectation("excludesAll", false),
      peg$c82 = "isEmpty",
      peg$c83 = peg$literalExpectation("isEmpty", false),
      peg$c84 = "notEmpty",
      peg$c85 = peg$literalExpectation("notEmpty", false),
      peg$c86 = "sum",
      peg$c87 = peg$literalExpectation("sum", false),
      peg$c88 = "count",
      peg$c89 = peg$literalExpectation("count", false),
      peg$c90 = "includes",
      peg$c91 = peg$literalExpectation("includes", false),
      peg$c92 = "excludes",
      peg$c93 = peg$literalExpectation("excludes", false),
      peg$c94 = "first",
      peg$c95 = peg$literalExpectation("first", false),
      peg$c96 = "last",
      peg$c97 = peg$literalExpectation("last", false),
      peg$c98 = "at",
      peg$c99 = peg$literalExpectation("at", false),
      peg$c100 = "indexOf",
      peg$c101 = peg$literalExpectation("indexOf", false),
      peg$c102 = "union",
      peg$c103 = peg$literalExpectation("union", false),
      peg$c104 = "intersection",
      peg$c105 = peg$literalExpectation("intersection", false),
      peg$c106 = "symmetricDifference",
      peg$c107 = peg$literalExpectation("symmetricDifference", false),
      peg$c108 = "including",
      peg$c109 = peg$literalExpectation("including", false),
      peg$c110 = "excluding",
      peg$c111 = peg$literalExpectation("excluding", false),
      peg$c112 = "subSequence",
      peg$c113 = peg$literalExpectation("subSequence", false),
      peg$c114 = "subOrderedSet",
      peg$c115 = peg$literalExpectation("subOrderedSet", false),
      peg$c116 = "append",
      peg$c117 = peg$literalExpectation("append", false),
      peg$c118 = "prepend",
      peg$c119 = peg$literalExpectation("prepend", false),
      peg$c120 = "insertAt",
      peg$c121 = peg$literalExpectation("insertAt", false),
      peg$c122 = function(self, path, args) { 
          return {
              termType: "navigation",
              pathElements: path,
              args: args,
              pathType: self === null ? undefined : "attribute"
           }
      },
      peg$c123 = function() {
              return {
                  termType: "navigation",
                  pathElements: [],
                  args: [],
                  pathType: "instance"
              }
          },
      peg$c124 = function(args) { return args === null ? [] : args; },
      peg$c125 = function(first, expr) { return expr; },
      peg$c126 = ".",
      peg$c127 = peg$literalExpectation(".", false),
      peg$c128 = "TODO",
      peg$c129 = peg$literalExpectation("TODO", false),
      peg$c130 = "iterate",
      peg$c131 = peg$literalExpectation("iterate", false),
      peg$c132 = function(first, other) {
          return {
              termType: "let", 
              letExprElements: [first].concat(other)
          }
      },
      peg$c133 = function(first, other) { return [first].concat(other) },
      peg$c134 = function(expression) { return expression; },
      peg$c135 = function(literal) {
          literal.termType = "literal";
          return literal;
      },
      peg$c136 = function(enumName, value) {
          return {
              literalType: "enumeration",
              enumName: enumName,
              value: value
          }
      },
      peg$c137 = function(typeDefinition) {
          return {
              literalType: "type",
              typeDefinition: typeDefinition
          }
      },
      peg$c138 = function(collectionType, items) {
          return {
              literalType: "collection",
              collectionType: collectionType,
              items: items
          }
      },
      peg$c139 = function(first, part) { return part; },
      peg$c140 = function(first, last) {
          return {
              partType: "range",
              first: first,
              last: last
          }
      },
      peg$c141 = function(variableList) {
          return {
              literalType: "tuple",
              variableList: variableList
          }
      },
      peg$c142 = function(firstVar, variable) { return variable; },
      peg$c143 = function(firstVar, otherVars) {
          return [firstVar].concat(otherVars);
      },
      peg$c144 = function(name, type) { return type },
      peg$c145 = function(name, typeDefinition, expression) { return expression },
      peg$c146 = function(name, typeDefinition, initExpression) {
          return {
              variableName: name,
              typeDefinition: typeDefinition,
              initExpression: initExpression
          }
      },
      peg$c147 = function() {
          return {
              literalType: "null"
          }
      },
      peg$c148 = function() {
          return {
              literalType: "invalid"
          }
      },
      peg$c149 = function(value) {
          return {
              literalType: "string",
              value: value
          }
      },
      peg$c150 = "*",
      peg$c151 = peg$literalExpectation("*", false),
      peg$c152 = function(value) {
          return {
              literalType: "number",
              value: value === '*' ? "infinity" : value
          }
      },
      peg$c153 = function(value) {
          return {
              literalType: "boolean",
              value: value
          }
      },
      peg$c154 = function(typeDef) {
          typeDef.termType = "typeDefinition";
          return typeDef;
      },
      peg$c155 = function(name) {
          return {
              typeClass: "primitiveType",
              name: name
          }
      },
      peg$c156 = function(name) {
          return {
              typeClass: "oclType",
              name: name
          }
      },
      peg$c157 = function(name, itemType) {
          return {
              typeClass: "collectionType",
              name: name,
              itemType: itemType
          }
      },
      peg$c158 = function(variables) {
          return {
              typeClass: "tupleType",
              variables: variables === null ? [] : variables
          }
      },
      peg$c159 = "Set",
      peg$c160 = peg$literalExpectation("Set", false),
      peg$c161 = function() { return "Set"; },
      peg$c162 = "Bag",
      peg$c163 = peg$literalExpectation("Bag", false),
      peg$c164 = function() { return "Bag"; },
      peg$c165 = "Sequence",
      peg$c166 = peg$literalExpectation("Sequence", false),
      peg$c167 = function() { return "Sequence"; },
      peg$c168 = "Collection",
      peg$c169 = peg$literalExpectation("Collection", false),
      peg$c170 = function() { return "Collection"; },
      peg$c171 = "OrderedSet",
      peg$c172 = peg$literalExpectation("OrderedSet", false),
      peg$c173 = function() { return "OrderedSet"; },
      peg$c174 = "OclAny",
      peg$c175 = peg$literalExpectation("OclAny", false),
      peg$c176 = function() { return "OclAny"; },
      peg$c177 = "OclInvalid",
      peg$c178 = peg$literalExpectation("OclInvalid", false),
      peg$c179 = function() { return "OclInvalid"; },
      peg$c180 = "OclVoid",
      peg$c181 = peg$literalExpectation("OclVoid", false),
      peg$c182 = function() { return "OclVoid"; },
      peg$c183 = "Boolean",
      peg$c184 = peg$literalExpectation("Boolean", false),
      peg$c185 = function() { return "Boolean"; },
      peg$c186 = "Integer",
      peg$c187 = peg$literalExpectation("Integer", false),
      peg$c188 = function() { return "Integer"; },
      peg$c189 = "Real",
      peg$c190 = peg$literalExpectation("Real", false),
      peg$c191 = function() { return "Real"; },
      peg$c192 = "String",
      peg$c193 = peg$literalExpectation("String", false),
      peg$c194 = function() { return "String"; },
      peg$c195 = "UnlimitedNatural",
      peg$c196 = peg$literalExpectation("UnlimitedNatural", false),
      peg$c197 = function() { return  "UnlimitedNatural"; },
      peg$c198 = "Tuple",
      peg$c199 = peg$literalExpectation("Tuple", false),
      peg$c200 = "let",
      peg$c201 = peg$literalExpectation("let", false),
      peg$c202 = "in",
      peg$c203 = peg$literalExpectation("in", false),
      peg$c204 = "static",
      peg$c205 = peg$literalExpectation("static", false),
      peg$c206 = "null",
      peg$c207 = peg$literalExpectation("null", false),
      peg$c208 = "invalid",
      peg$c209 = peg$literalExpectation("invalid", false),
      peg$c210 = "if",
      peg$c211 = peg$literalExpectation("if", false),
      peg$c212 = "then",
      peg$c213 = peg$literalExpectation("then", false),
      peg$c214 = "else",
      peg$c215 = peg$literalExpectation("else", false),
      peg$c216 = "endif",
      peg$c217 = peg$literalExpectation("endif", false),
      peg$c218 = "package",
      peg$c219 = peg$literalExpectation("package", false),
      peg$c220 = "endpackage",
      peg$c221 = peg$literalExpectation("endpackage", false),
      peg$c222 = "context",
      peg$c223 = peg$literalExpectation("context", false),
      peg$c224 = "pre",
      peg$c225 = peg$literalExpectation("pre", false),
      peg$c226 = function() { return "pre"; },
      peg$c227 = "post",
      peg$c228 = peg$literalExpectation("post", false),
      peg$c229 = function() { return "post"; },
      peg$c230 = "inv",
      peg$c231 = peg$literalExpectation("inv", false),
      peg$c232 = function() { return "inv"; },
      peg$c233 = "body",
      peg$c234 = peg$literalExpectation("body", false),
      peg$c235 = function() { return "body"; },
      peg$c236 = "derive",
      peg$c237 = peg$literalExpectation("derive", false),
      peg$c238 = function() { return "derive"; },
      peg$c239 = "init",
      peg$c240 = peg$literalExpectation("init", false),
      peg$c241 = function() { return "init"; },
      peg$c242 = "self",
      peg$c243 = peg$literalExpectation("self", false),
      peg$c244 = "true",
      peg$c245 = peg$literalExpectation("true", false),
      peg$c246 = function() { return "true"; },
      peg$c247 = "false",
      peg$c248 = peg$literalExpectation("false", false),
      peg$c249 = function() { return "false"; },
      peg$c250 = "|",
      peg$c251 = peg$literalExpectation("|", false),
      peg$c252 = "..",
      peg$c253 = peg$literalExpectation("..", false),
      peg$c254 = ",",
      peg$c255 = peg$literalExpectation(",", false),
      peg$c256 = "::",
      peg$c257 = peg$literalExpectation("::", false),
      peg$c258 = ":",
      peg$c259 = peg$literalExpectation(":", false),
      peg$c260 = ";",
      peg$c261 = peg$literalExpectation(";", false),
      peg$c262 = "@pre",
      peg$c263 = peg$literalExpectation("@pre", false),
      peg$c264 = "->",
      peg$c265 = peg$literalExpectation("->", false),
      peg$c266 = "not",
      peg$c267 = peg$literalExpectation("not", false),
      peg$c268 = "/",
      peg$c269 = peg$literalExpectation("/", false),
      peg$c270 = "-",
      peg$c271 = peg$literalExpectation("-", false),
      peg$c272 = "+",
      peg$c273 = peg$literalExpectation("+", false),
      peg$c274 = "<",
      peg$c275 = peg$literalExpectation("<", false),
      peg$c276 = ">",
      peg$c277 = peg$literalExpectation(">", false),
      peg$c278 = "<=",
      peg$c279 = peg$literalExpectation("<=", false),
      peg$c280 = ">=",
      peg$c281 = peg$literalExpectation(">=", false),
      peg$c282 = "=",
      peg$c283 = peg$literalExpectation("=", false),
      peg$c284 = "<>",
      peg$c285 = peg$literalExpectation("<>", false),
      peg$c286 = "and",
      peg$c287 = peg$literalExpectation("and", false),
      peg$c288 = "or",
      peg$c289 = peg$literalExpectation("or", false),
      peg$c290 = "xor",
      peg$c291 = peg$literalExpectation("xor", false),
      peg$c292 = "implies",
      peg$c293 = peg$literalExpectation("implies", false),
      peg$c294 = "(",
      peg$c295 = peg$literalExpectation("(", false),
      peg$c296 = ")",
      peg$c297 = peg$literalExpectation(")", false),
      peg$c298 = "{",
      peg$c299 = peg$literalExpectation("{", false),
      peg$c300 = "}",
      peg$c301 = peg$literalExpectation("}", false),
      peg$c302 = "_",
      peg$c303 = peg$literalExpectation("_", false),
      peg$c304 = "'",
      peg$c305 = peg$literalExpectation("'", false),
      peg$c306 = function(value) { 
          return value.join("");
      },
      peg$c307 = "\"",
      peg$c308 = peg$literalExpectation("\"", false),
      peg$c309 = function(wholePart, decimalPart) { return decimalPart.join(""); },
      peg$c310 = function(wholePart, decimalPart) { 
          var number = wholePart.join("");
          if(decimalPart !== null) {
              number += "." + decimalPart;
          }
          return number;
      },
      peg$c311 = function(decimalPart) { return "0." + decimalPart.join(""); },
      peg$c312 = function(first, name) { return name; },
      peg$c313 = function(first, other, unreservedName) {
          return [first].concat(other).concat(unreservedName === null ? []: [unreservedName]);
      },
      peg$c314 = "_'",
      peg$c315 = peg$literalExpectation("_'", false),
      peg$c316 = /^[^']/,
      peg$c317 = peg$classExpectation(["'"], true, false),
      peg$c318 = function(data) { return data.join(""); },
      peg$c319 = function(first, other) { return first + other.join(""); },
      peg$c320 = /^[A-Z]/,
      peg$c321 = peg$classExpectation([["A", "Z"]], false, false),
      peg$c322 = /^[_]/,
      peg$c323 = peg$classExpectation(["_"], false, false),
      peg$c324 = /^[$]/,
      peg$c325 = peg$classExpectation(["$"], false, false),
      peg$c326 = /^[a-z]/,
      peg$c327 = peg$classExpectation([["a", "z"]], false, false),
      peg$c328 = /^[\xC0-\xD6]/,
      peg$c329 = peg$classExpectation([["\xC0", "\xD6"]], false, false),
      peg$c330 = /^[\xD8-\xF6]/,
      peg$c331 = peg$classExpectation([["\xD8", "\xF6"]], false, false),
      peg$c332 = /^[\xF8-\u02FF]/,
      peg$c333 = peg$classExpectation([["\xF8", "\u02FF"]], false, false),
      peg$c334 = /^[\u0370-\u037D]/,
      peg$c335 = peg$classExpectation([["\u0370", "\u037D"]], false, false),
      peg$c336 = /^[\u037F-\u1FFF]/,
      peg$c337 = peg$classExpectation([["\u037F", "\u1FFF"]], false, false),
      peg$c338 = /^[\u200C-\u200D]/,
      peg$c339 = peg$classExpectation([["\u200C", "\u200D"]], false, false),
      peg$c340 = /^[\u2070-\u218F]/,
      peg$c341 = peg$classExpectation([["\u2070", "\u218F"]], false, false),
      peg$c342 = /^[\u2C00-\u2FEF]/,
      peg$c343 = peg$classExpectation([["\u2C00", "\u2FEF"]], false, false),
      peg$c344 = /^[\u3001-\uD7FF]/,
      peg$c345 = peg$classExpectation([["\u3001", "\uD7FF"]], false, false),
      peg$c346 = /^[\uF900-\uFDCF]/,
      peg$c347 = peg$classExpectation([["\uF900", "\uFDCF"]], false, false),
      peg$c348 = /^[\uFDF0-\uFFFD]/,
      peg$c349 = peg$classExpectation([["\uFDF0", "\uFFFD"]], false, false),
      peg$c350 = function(value) { return value; },
      peg$c351 = "\\",
      peg$c352 = peg$literalExpectation("\\", false),
      peg$c353 = "b",
      peg$c354 = peg$literalExpectation("b", false),
      peg$c355 = function() { return "\b"; },
      peg$c356 = "f",
      peg$c357 = peg$literalExpectation("f", false),
      peg$c358 = function() { return "\f"; },
      peg$c359 = "n",
      peg$c360 = peg$literalExpectation("n", false),
      peg$c361 = function() { return "\n"; },
      peg$c362 = "r",
      peg$c363 = peg$literalExpectation("r", false),
      peg$c364 = function() { return "\r"; },
      peg$c365 = "t",
      peg$c366 = peg$literalExpectation("t", false),
      peg$c367 = function() { return "\t"; },
      peg$c368 = "u",
      peg$c369 = peg$literalExpectation("u", false),
      peg$c370 = function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
      peg$c371 = function(sequence) { return sequence; },
      peg$c372 = /^[ -!#-[\]-\uFFFF]/,
      peg$c373 = peg$classExpectation([[" ", "!"], ["#", "["], ["]", "\uFFFF"]], false, false),
      peg$c374 = /^[0-9]/,
      peg$c375 = peg$classExpectation([["0", "9"]], false, false),
      peg$c376 = /^[A-F]/,
      peg$c377 = peg$classExpectation([["A", "F"]], false, false),
      peg$c378 = /^[ \n\r\t]/,
      peg$c379 = peg$classExpectation([" ", "\n", "\r", "\t"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseOCL() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsepackage();
      if (s3 === peg$FAILED) {
        s3 = peg$parsecontext();
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsepackage();
          if (s3 === peg$FAILED) {
            s3 = peg$parsecontext();
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepackage() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsekwPackage();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseelementPath();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsecontext();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsecontext();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsekwEndPackage();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseelementPath() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseopDoubleColon();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsesimpleName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c2(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseopDoubleColon();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesimpleName();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c2(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecontext() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsecontextHeading();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseoclRule();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseoclRule();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c4(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecontextHeading() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekwContext();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseelementPath();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoperationDeclaration();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperationDeclaration() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseopLParen();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseparameterList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseopRParen();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c6(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopColon();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparameterList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseparamDeclaration();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseopComma();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseparamDeclaration();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c8(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseparamDeclaration();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c8(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparamDeclaration() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopColon();
      if (s2 !== peg$FAILED) {
        s3 = peg$parserestrictedKeywords();
        if (s3 === peg$FAILED) {
          s3 = peg$parsesimpleName();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecontextName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopColon();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoclRule() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseoclRuleType();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsesimpleName();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseopColon();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsensExpr0();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s1, s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoclRuleType() {
    var s0;

    s0 = peg$parsekwPrecondition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsekwPostcondition();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwInvariant();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwBody();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekwDerive();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekwInit();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseoclExpression() {
    var s0;

    s0 = peg$parsensExpr0();

    return s0;
  }

  function peg$parsensExpr0() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr1();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_0();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_0() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseopImplies();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr1();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr1();
      if (s0 === peg$FAILED) {
        s0 = null;
      }
    }

    return s0;
  }

  function peg$parsensExpr1() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr2();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_1();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_1() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseopXor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr2();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr2();
      if (s0 === peg$FAILED) {
        s0 = null;
      }
    }

    return s0;
  }

  function peg$parsensExpr2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr3();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_2();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseopOr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr3();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c16(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr3();
      if (s0 === peg$FAILED) {
        s0 = null;
      }
    }

    return s0;
  }

  function peg$parsensExpr3() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr4();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_3();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_3() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseopAnd();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr4();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c17(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr4();
      if (s0 === peg$FAILED) {
        s0 = null;
      }
    }

    return s0;
  }

  function peg$parsensExpr4() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr5();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_4();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_4() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseopEqual();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr5();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseopNotEqual();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr5();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsensExpr5();
        if (s0 === peg$FAILED) {
          s0 = null;
        }
      }
    }

    return s0;
  }

  function peg$parsensExpr5() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr6();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_5();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_5() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseopNotEqual();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopLess();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsensExpr6();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseopGreater();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr6();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopLessOrEqual();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr6();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c22(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopGreaterOrEqual();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsensExpr6();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c23(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsensExpr6();
            if (s0 === peg$FAILED) {
              s0 = null;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsensExpr6() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopMinus();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr9();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsensExpr_6();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c24(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsensExpr7();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr_6();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsensExpr_6() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopPlus();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr7();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsensExpr_6();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseopMinus();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr7();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr_6();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c26(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsensExpr7();
        if (s0 === peg$FAILED) {
          s0 = null;
        }
      }
    }

    return s0;
  }

  function peg$parsensExpr7() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr8();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr_7();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensExpr_7() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopMult();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr8();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsensExpr_7();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseopDiv();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr8();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr_7();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c28(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsensExpr8();
        if (s0 === peg$FAILED) {
          s0 = null;
        }
      }
    }

    return s0;
  }

  function peg$parsensExpr8() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseopNot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr9();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c29(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseopLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopMinus();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr9();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopRParen();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c30(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsensExpr9();
      }
    }

    return s0;
  }

  function peg$parsensExpr9() {
    var s0;

    s0 = peg$parsecallExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr10();
    }

    return s0;
  }

  function peg$parsensExpr10() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsensExpr11();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopPre();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr11();
    }

    return s0;
  }

  function peg$parsensExpr11() {
    var s0;

    s0 = peg$parseletExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr12();
    }

    return s0;
  }

  function peg$parsensExpr12() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseliteral();
    if (s1 === peg$FAILED) {
      s1 = peg$parsevariableExpression();
      if (s1 === peg$FAILED) {
        s1 = peg$parsensParenthisExpression();
        if (s1 === peg$FAILED) {
          s1 = peg$parsensIfExpression();
          if (s1 === peg$FAILED) {
            s1 = peg$parsenavigation();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensIfExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsekwIf();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsekwThen();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsensExpr0();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsekwElse();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsensExpr0();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsekwEndIf();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c32(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsensParenthisExpression() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopLParen();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr0();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseopRParen();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebuiltInFunctionChain() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = peg$parseopDot();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsebuiltInFunctionNames();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseopArrow();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecollectionFunctionNames();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s2 !== peg$FAILED) {
      peg$currPos = s1;
      s1 = void 0;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsebuiltInFunction();
      if (s3 === peg$FAILED) {
        s3 = peg$parsecollectionFunction();
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsebuiltInFunction();
          if (s3 === peg$FAILED) {
            s3 = peg$parsecollectionFunction();
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c34(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebuiltInFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopDot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebuiltInFunctionNames();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemethodArguments();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c35(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecollectionFunction() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopArrow();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsecollectionFunctionNames();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemethodArguments();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c36(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebuiltInFunctionNames() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c41) {
          s1 = peg$c41;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c43) {
            s1 = peg$c43;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c44); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c45) {
              s1 = peg$c45;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c47) {
                s1 = peg$c47;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c49) {
                  s1 = peg$c49;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c50); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c51) {
                    s1 = peg$c51;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c52); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c53) {
                      s1 = peg$c53;
                      peg$currPos += 6;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c54); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c55) {
                        s1 = peg$c55;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c56); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 7) === peg$c57) {
                          s1 = peg$c57;
                          peg$currPos += 7;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c58); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c59) {
                            s1 = peg$c59;
                            peg$currPos += 7;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c60); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 9) === peg$c61) {
                              s1 = peg$c61;
                              peg$currPos += 9;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c62); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c63) {
                                s1 = peg$c63;
                                peg$currPos += 6;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c64); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c65) {
                                  s1 = peg$c65;
                                  peg$currPos += 9;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c67(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecollectionFunctionNames() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 12) === peg$c70) {
        s1 = peg$c70;
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c72) {
          s1 = peg$c72;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c74) {
            s1 = peg$c74;
            peg$currPos += 10;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c75); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c76) {
              s1 = peg$c76;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 11) === peg$c78) {
                s1 = peg$c78;
                peg$currPos += 11;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c80) {
                  s1 = peg$c80;
                  peg$currPos += 11;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c82) {
                    s1 = peg$c82;
                    peg$currPos += 7;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c83); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c84) {
                      s1 = peg$c84;
                      peg$currPos += 8;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c85); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c55) {
                        s1 = peg$c55;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c56); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c86) {
                          s1 = peg$c86;
                          peg$currPos += 3;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c87); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c88) {
                            s1 = peg$c88;
                            peg$currPos += 5;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c89); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 8) === peg$c90) {
                              s1 = peg$c90;
                              peg$currPos += 8;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c91); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 8) === peg$c92) {
                                s1 = peg$c92;
                                peg$currPos += 8;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c93); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c94) {
                                  s1 = peg$c94;
                                  peg$currPos += 5;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c96) {
                                    s1 = peg$c96;
                                    peg$currPos += 4;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c97); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c98) {
                                      s1 = peg$c98;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c99); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 7) === peg$c100) {
                                        s1 = peg$c100;
                                        peg$currPos += 7;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c101); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 5) === peg$c102) {
                                          s1 = peg$c102;
                                          peg$currPos += 5;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 12) === peg$c104) {
                                            s1 = peg$c104;
                                            peg$currPos += 12;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 19) === peg$c106) {
                                              s1 = peg$c106;
                                              peg$currPos += 19;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 9) === peg$c108) {
                                                s1 = peg$c108;
                                                peg$currPos += 9;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 9) === peg$c110) {
                                                  s1 = peg$c110;
                                                  peg$currPos += 9;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 11) === peg$c112) {
                                                    s1 = peg$c112;
                                                    peg$currPos += 11;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 13) === peg$c114) {
                                                      s1 = peg$c114;
                                                      peg$currPos += 13;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 6) === peg$c116) {
                                                        s1 = peg$c116;
                                                        peg$currPos += 6;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 7) === peg$c118) {
                                                          s1 = peg$c118;
                                                          peg$currPos += 7;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 8) === peg$c120) {
                                                            s1 = peg$c120;
                                                            peg$currPos += 8;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c67(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenavigation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsekwSelf();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseopDot();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenavigationPath();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemethodArguments();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c122(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsekwSelf();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c123();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenavigationPath() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseopDot();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsesimpleName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c2(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseopDot();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesimpleName();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c2(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemethodArguments() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseopLParen();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseargumentList();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseopRParen();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c124(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseargumentList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsensExpr0();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseopComma();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsensExpr0();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c125(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsensExpr0();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c125(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableExpression() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsekwSelf();
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsesimpleName();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c126;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsekwSelf();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesimpleName();
    }

    return s0;
  }

  function peg$parsecallExpression() {
    var s0;

    s0 = peg$parsefeatureCall();
    if (s0 === peg$FAILED) {
      s0 = peg$parseloopExpression();
    }

    return s0;
  }

  function peg$parsefeatureCall() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c129); }
    }

    return s0;
  }

  function peg$parseloopExpression() {
    var s0;

    s0 = peg$parseiteratorExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseiterateExpression();
    }

    return s0;
  }

  function peg$parseiteratorExpression() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsensExpr12();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopArrow();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopLParen();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseiteratee();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseopRParen();
              if (s6 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiteratee() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsevariableDeclaration();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parseopComma();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsevariableDeclaration();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseopVerticalLine();
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsensExpr0();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseiterateExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parsensExpr12();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopArrow();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c130) {
          s3 = peg$c130;
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c131); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopLParen();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parsevariableDeclaration();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseopSemiColon();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsevariableDeclaration();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseopVerticalLine();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsensExpr0();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseopRParen();
                    if (s9 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseletExpression() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekwLet();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevariableDeclaration();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseletExpressionSub();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c132(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseletExpressionSub() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseopComma();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsevariableDeclaration();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseletExpressionSub();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c133(s3, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsekwIn();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsensExpr0();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c134(s3);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c134(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseliteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseprimitiveLiteral();
    if (s1 === peg$FAILED) {
      s1 = peg$parsetupleLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecollectionLiteral();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetypeLiteral();
          if (s1 === peg$FAILED) {
            s1 = peg$parseenumLiteral();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c135(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseenumLiteral() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsepathName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopDoubleColon();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesimpleName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c136(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetypeLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsetypeDefinition();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c137(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecollectionLiteral() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsecollectionTypeIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopLBrace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsecollectionLiteralParts();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopRBrace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c138(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecollectionLiteralParts() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecolletionLiteralPart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseopComma();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecolletionLiteralPart();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c139(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecolletionLiteralPart();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c139(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolletionLiteralPart() {
    var s0;

    s0 = peg$parsecollectionRange();
    if (s0 === peg$FAILED) {
      s0 = peg$parsensExpr0();
    }

    return s0;
  }

  function peg$parsecollectionRange() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsensExpr0();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopDoubleDot();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsensExpr0();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c140(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetupleLiteral() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsekwTuple();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopLBrace();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableDeclarationList();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopRBrace();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c141(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableDeclarationList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsevariableDeclaration();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseopComma();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsevariableDeclaration();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c142(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsevariableDeclaration();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c142(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c143(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevariableDeclaration() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseopColon();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsetypeDefinition();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c144(s1, s4);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseopEqual();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsensExpr0();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c145(s1, s2, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c146(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseprimitiveLiteral() {
    var s0;

    s0 = peg$parsebooleanLiteral();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumberLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestringLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsenullLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinvalidLiteral();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenullLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekwNull();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c147();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseinvalidLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekwInvalid();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c148();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestringLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestringInQuotes();
    if (s1 === peg$FAILED) {
      s1 = peg$parsestringInDoubleQuotes();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c149(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsenumberLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsenumber();
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c150;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c151); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c152(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebooleanLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekwTrue();
    if (s1 === peg$FAILED) {
      s1 = peg$parsekwFalse();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c153(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetypeDefinition() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepathName();
    if (s1 === peg$FAILED) {
      s1 = peg$parsecollectionType();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleType();
        if (s1 === peg$FAILED) {
          s1 = peg$parseprimitiveType();
          if (s1 === peg$FAILED) {
            s1 = peg$parseoclType();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c154(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseprimitiveType() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekwBoolean();
    if (s1 === peg$FAILED) {
      s1 = peg$parsekwString();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekwInteger();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekwReal();
          if (s1 === peg$FAILED) {
            s1 = peg$parsekwUnlimitedNatural();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c155(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseoclType() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekwOclAny();
    if (s1 === peg$FAILED) {
      s1 = peg$parsekwOclInvalid();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekwOclVoid();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c156(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecollectionType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsecollectionTypeIdent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopLParen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetypeDefinition();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopRParen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c157(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecollectionTypeIdent() {
    var s0;

    s0 = peg$parsekwBag();
    if (s0 === peg$FAILED) {
      s0 = peg$parsekwSet();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwOrderedSet();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwCollection();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekwSequence();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetupleType() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsekwTuple();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseopLParen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevariableDeclarationList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopRParen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c158(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekeyword() {
    var s0;

    s0 = peg$parseopNot();
    if (s0 === peg$FAILED) {
      s0 = peg$parseopAnd();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopOr();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopXor();
          if (s0 === peg$FAILED) {
            s0 = peg$parseopImplies();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekwContext();
              if (s0 === peg$FAILED) {
                s0 = peg$parsekwEndPackage();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsekwPackage();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsekwTrue();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsekwFalse();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsekwSelf();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsekwPrecondition();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsekwPostcondition();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsekwInvariant();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsekwBody();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsekwDerive();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsekwInit();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsekwIf();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsekwThen();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsekwElse();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsekwEndIf();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsekwNull();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsekwInvalid();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsekwLet();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsekwIn();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsekwStatic();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parserestrictedKeywords() {
    var s0;

    s0 = peg$parsekwSet();
    if (s0 === peg$FAILED) {
      s0 = peg$parsekwBag();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwSequence();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwCollection();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekwOrderedSet();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekwOclAny();
              if (s0 === peg$FAILED) {
                s0 = peg$parsekwOclInvalid();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsekwOclVoid();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsekwBoolean();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsekwInteger();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsekwReal();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsekwUnlimitedNatural();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsekwString();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsekwTuple();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsekwSet() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c159) {
      s1 = peg$c159;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c161();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwBag() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c162) {
      s1 = peg$c162;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c163); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c164();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwSequence() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c165) {
      s1 = peg$c165;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c167();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwCollection() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c168) {
      s1 = peg$c168;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c169); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c170();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwOrderedSet() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c171) {
      s1 = peg$c171;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c172); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c173();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwOclAny() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c174) {
      s1 = peg$c174;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c175); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c176();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwOclInvalid() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c177) {
      s1 = peg$c177;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c179();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwOclVoid() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c180) {
      s1 = peg$c180;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c181); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c182();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwBoolean() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c183) {
      s1 = peg$c183;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c185();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwInteger() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c186) {
      s1 = peg$c186;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c187); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c188();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwReal() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c189) {
      s1 = peg$c189;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c191();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwString() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c192) {
      s1 = peg$c192;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c193); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c194();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwUnlimitedNatural() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 16) === peg$c195) {
      s1 = peg$c195;
      peg$currPos += 16;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c196); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c197();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwTuple() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c198) {
      s1 = peg$c198;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c199); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwLet() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c200) {
      s1 = peg$c200;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c201); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwIn() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c202) {
      s1 = peg$c202;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c203); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwStatic() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c204) {
      s1 = peg$c204;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c205); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwNull() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c206) {
      s1 = peg$c206;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c207); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwInvalid() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c208) {
      s1 = peg$c208;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c209); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwIf() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c210) {
      s1 = peg$c210;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c211); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwThen() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c212) {
      s1 = peg$c212;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c213); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwElse() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c214) {
      s1 = peg$c214;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c215); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwEndIf() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c216) {
      s1 = peg$c216;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c217); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwPackage() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c218) {
      s1 = peg$c218;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c219); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwEndPackage() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c220) {
      s1 = peg$c220;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c221); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwContext() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c222) {
      s1 = peg$c222;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c223); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwPrecondition() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c224) {
      s1 = peg$c224;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c225); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c226();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwPostcondition() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c227) {
      s1 = peg$c227;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c228); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c229();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwInvariant() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c230) {
      s1 = peg$c230;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c231); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c232();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwBody() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c233) {
      s1 = peg$c233;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c235();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwDerive() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c236) {
      s1 = peg$c236;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c237); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c238();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwInit() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c239) {
      s1 = peg$c239;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c240); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c241();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwSelf() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c242) {
      s1 = peg$c242;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c243); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwTrue() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c244) {
      s1 = peg$c244;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c245); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c246();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsekwFalse() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c247) {
      s1 = peg$c247;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c248); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseKW_SEP();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c249();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKW_SEP() {
    var s0, s1;

    s0 = peg$parse__();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$silentFails++;
      s1 = peg$parseoperator();
      peg$silentFails--;
      if (s1 !== peg$FAILED) {
        peg$currPos = s0;
        s0 = void 0;
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseoperator() {
    var s0;

    s0 = peg$parseopVerticalLine();
    if (s0 === peg$FAILED) {
      s0 = peg$parseopDoubleDot();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopComma();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopDoubleColon();
          if (s0 === peg$FAILED) {
            s0 = peg$parseopColon();
            if (s0 === peg$FAILED) {
              s0 = peg$parseopSemiColon();
              if (s0 === peg$FAILED) {
                s0 = peg$parseopPre();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseopDot();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseopArrow();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseopNot();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseopMult();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseopDiv();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseopMinus();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseopPlus();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseopLess();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseopGreater();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseopLessOrEqual();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseopGreaterOrEqual();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseopEqual();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseopNotEqual();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseopAnd();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseopOr();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseopXor();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseopImplies();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseopLParen();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseopRParen();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseopLBrace();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseopRBrace();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseopVerticalLine() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 124) {
      s1 = peg$c250;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c251); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopDoubleDot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c252) {
      s1 = peg$c252;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c253); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopComma() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c254;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c255); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopDoubleColon() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c256) {
      s1 = peg$c256;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c257); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopColon() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c258;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c259); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopSemiColon() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c260;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c261); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopPre() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c262) {
      s1 = peg$c262;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c263); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopDot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c126;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopArrow() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c264) {
      s1 = peg$c264;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c265); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopNot() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c266) {
      s1 = peg$c266;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c267); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopMult() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c150;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c151); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopDiv() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c268;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c269); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopMinus() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c270;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c271); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopPlus() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c272;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c273); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopLess() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c274;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c275); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopGreater() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 62) {
      s1 = peg$c276;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c277); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopLessOrEqual() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c278) {
      s1 = peg$c278;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c279); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopGreaterOrEqual() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c280) {
      s1 = peg$c280;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c281); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopEqual() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c282;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c283); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopNotEqual() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c284) {
      s1 = peg$c284;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c285); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopAnd() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c286) {
      s1 = peg$c286;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c287); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopOr() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c288) {
      s1 = peg$c288;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c289); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopXor() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c290) {
      s1 = peg$c290;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c291); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopImplies() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c292) {
      s1 = peg$c292;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c293); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopLParen() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c294;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c295); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopRParen() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 41) {
      s1 = peg$c296;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c297); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopLBrace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c298;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c299); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopRBrace() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 125) {
      s1 = peg$c300;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c301); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestringInQuotes() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 95) {
      s2 = peg$c302;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c303); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c304;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c305); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseStringChar();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseStringChar();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c304;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c305); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c306(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestringInDoubleQuotes() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c307;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c308); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseStringChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseStringChar();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c307;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c306(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parsedigit();
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsedigit();
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c126;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseUnicodeChar();
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsedigit();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsedigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c126;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parsedigit();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsedigit();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c309(s2, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c310(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c126;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseUnicodeChar();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c126;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedigit();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsedigit();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c311(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsereservedWords() {
    var s0, s1, s2;

    s0 = peg$parserestrictedKeywords();
    if (s0 === peg$FAILED) {
      s0 = peg$parsekeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebuiltInFunctionNames();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopArrow();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecollectionFunctionNames();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepathName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsesimpleName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsesimpleName();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s3;
        s4 = peg$c312(s1, s4);
      }
      s3 = s4;
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsesimpleName();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c312(s1, s4);
        }
        s3 = s4;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseunreservedSimpleName();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c313(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunreservedSimpleName() {
    var s0;

    s0 = peg$parsesimpleName();
    if (s0 === peg$FAILED) {
      s0 = peg$parserestrictedKeywords();
    }

    return s0;
  }

  function peg$parsesimpleName() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c314) {
      s1 = peg$c314;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c315); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c316.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c317); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c316.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c317); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c304;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c318(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseidentifier();
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsereservedWords();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnicodeChar();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsedigit();
        if (s4 === peg$FAILED) {
          s4 = peg$parseUnicodeChar();
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsedigit();
          if (s4 === peg$FAILED) {
            s4 = peg$parseUnicodeChar();
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseKW_SEP();
          if (s4 === peg$FAILED) {
            s4 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c319(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnicodeChar() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c320.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 === peg$FAILED) {
      if (peg$c322.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c323); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c324.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c325); }
        }
        if (s1 === peg$FAILED) {
          if (peg$c326.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c327); }
          }
          if (s1 === peg$FAILED) {
            if (peg$c328.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c329); }
            }
            if (s1 === peg$FAILED) {
              if (peg$c330.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c331); }
              }
              if (s1 === peg$FAILED) {
                if (peg$c332.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c333); }
                }
                if (s1 === peg$FAILED) {
                  if (peg$c334.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c335); }
                  }
                  if (s1 === peg$FAILED) {
                    if (peg$c336.test(input.charAt(peg$currPos))) {
                      s1 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c337); }
                    }
                    if (s1 === peg$FAILED) {
                      if (peg$c338.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c339); }
                      }
                      if (s1 === peg$FAILED) {
                        if (peg$c340.test(input.charAt(peg$currPos))) {
                          s1 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c341); }
                        }
                        if (s1 === peg$FAILED) {
                          if (peg$c342.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c343); }
                          }
                          if (s1 === peg$FAILED) {
                            if (peg$c344.test(input.charAt(peg$currPos))) {
                              s1 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c345); }
                            }
                            if (s1 === peg$FAILED) {
                              if (peg$c346.test(input.charAt(peg$currPos))) {
                                s1 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c347); }
                              }
                              if (s1 === peg$FAILED) {
                                if (peg$c348.test(input.charAt(peg$currPos))) {
                                  s1 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c349); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c350(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStringChar() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c304;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c305); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c307;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c308); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseunescaped();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c350(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c307;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s2 = peg$c351;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c352); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c268;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c269); }
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s3 = peg$c353;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c354); }
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c355();
              }
              s2 = s3;
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s3 = peg$c356;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c357); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c358();
                }
                s2 = s3;
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s3 = peg$c359;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c360); }
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c361();
                  }
                  s2 = s3;
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s3 = peg$c362;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c363); }
                    }
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c364();
                    }
                    s2 = s3;
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s3 = peg$c365;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c366); }
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c367();
                      }
                      s2 = s3;
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 117) {
                          s3 = peg$c368;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c369); }
                        }
                        if (s3 !== peg$FAILED) {
                          s4 = peg$currPos;
                          s5 = peg$currPos;
                          s6 = peg$parseHEXDIG();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parseHEXDIG();
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseHEXDIG();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseHEXDIG();
                                if (s9 !== peg$FAILED) {
                                  s6 = [s6, s7, s8, s9];
                                  s5 = s6;
                                } else {
                                  peg$currPos = s5;
                                  s5 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s5;
                              s5 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          }
                          if (s5 !== peg$FAILED) {
                            s4 = input.substring(s4, peg$currPos);
                          } else {
                            s4 = s5;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c370(s4);
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c371(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseescape() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 92) {
      s0 = peg$c351;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c352); }
    }

    return s0;
  }

  function peg$parsequotation_mark() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c307;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c308); }
    }

    return s0;
  }

  function peg$parseunescaped() {
    var s0;

    if (peg$c372.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c373); }
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0;

    if (peg$c374.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c375); }
    }

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    s0 = peg$parsedigit();
    if (s0 === peg$FAILED) {
      if (peg$c376.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c377); }
      }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$c378.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c379); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c378.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c379); }
      }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    s0 = [];
    if (peg$c378.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c379); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c378.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c379); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }


      function attachLeft(left, term) {
          if(term === null) {
              return left;
          }  else { 
              term.left = left; 
              return term; 
          }
      }

      function binOp(operatorName, term, subtree) {
          var right = term;
          if(subtree !== null) {
              subtree.left = term;
              right = subtree;
          } 
          return {
              operator: operatorName,
              left: undefined,
              right: right
          };
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
