module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { OCL: peg$parseOCL, oclExpression: peg$parseoclExpression },
        peg$startRuleFunction  = peg$parseOCL,

        peg$c0 = function(data) { return data; },
        peg$c1 = function(path, contexts) {
            return {
                type: "package",
                path: path,
                contexts: contexts
            }
        },
        peg$c2 = function(first, data) { return data; },
        peg$c3 = function(first, other) { return [first].concat(other);  },
        peg$c4 = function(context, rules) {
            return {
                type: "context",
                contextHeading: context,
                rules: rules
            }
        },
        peg$c5 = function(path, operationDeclaration) { 
            return { 
                //contextName: name, 
                elementPath: path,
                operationDeclaration: operationDeclaration
            }
        },
        peg$c6 = function(params) { return params; },
        peg$c7 = function(params, returnType) {
            return {
                parameters: params === null ? [] : params,
                returnType: returnType
            }
        },
        peg$c8 = function(first, param) { return param; },
        peg$c9 = function(first, other) {
            return [first].concat(other);
        },
        peg$c10 = function(paramName, paramType) {
            return {
                parameterName: paramName,
                parameterType: paramType
            }
        },
        peg$c11 = function(contextName) { return contextName; },
        peg$c12 = function(ruleType, ruleName, ruleBody) {
            return {
                ruleName: ruleName === null ? "": ruleName,
                ruleType: ruleType,
                ruleBody: ruleBody
            }
        },
        peg$c13 = function(left, term) { return attachLeft(left, term); },
        peg$c14 = function(term) { return binOp("implies", term, null); },
        peg$c15 = function(term) { return binOp("and", term, null); },
        peg$c16 = function(term) { return binOp("or", term, null); },
        peg$c17 = function(term) { return binOp("xor", term, null); },
        peg$c18 = function(term) { return binOp("equal", term, null); },
        peg$c19 = function(term) { return binOp("notEqual", term, null); },
        peg$c20 = function(term) { return binOp("less", term, null); },
        peg$c21 = function(term) { return binOp("greater", term, null); },
        peg$c22 = function(term) { return binOp("lessOrEqual", term, null); },
        peg$c23 = function(term) { return binOp("greaterOrEqual", term, null); },
        peg$c24 = function(condition, thenExpr, elseExpr) {
                return {
                    operator: "if",
                    condition: condition,
                    thenExpression: thenExpr,
                    elseExpression: elseExpr
                }
            },
        peg$c25 = function(leftTerm, term) { 
                var left = { operator: "negate", "left": leftTerm };
                if(term === null)  return left; else { term.left = left; return term; }
            },
        peg$c26 = function(term, subtree) { return binOp("add", term, subtree); },
        peg$c27 = function(term, subtree) { return binOp("sub", term, subtree); },
        peg$c28 = function(term, subtree) { return binOp("mult", term, subtree); },
        peg$c29 = function(term, subtree) { return binOp("div", term, subtree); },
        peg$c30 = function(left) { return { operator: "not", left: left }; },
        peg$c31 = function(left) { return { operator: "negate", left: left }; },
        peg$c32 = function(left, builtInFunction) { 
                    var term = {
                        operator: "parenthesis",
                        left: left
                    }
                    if(builtInFunction !== null) {
                        builtInFunction.first.firstArgument = term;
                        term =  builtInFunction.last;
                    }
                    return term;
                },
        peg$c33 = function(term, builtInFunction) {
                    if(builtInFunction !== null) {
                        builtInFunction.first.firstArgument = term;
                        term = builtInFunction.last;
                    }
                    return term;
                },
        peg$c34 = function(functions) {
            for(let i = 1; i < functions.length; i++) {
                functions[i].firstArgument = functions[i - 1];
            }
            return {
                first: functions[0],
                last: functions[functions.length - 1]
            };
        },
        peg$c35 = function(functionName, args) {
            return {
                firstArgument: null,
                termType: "builtInFunction",
                builtInFunction: functionName,
                args: args
            }
        },
        peg$c36 = function(functionName, args) {
            return {
                firstArgument: null,
                termType: "collectionFunction",
                builtInFunction: functionName,
                args: args
            }
        },
        peg$c37 = "oclIsUndefined",
        peg$c38 = { type: "literal", value: "oclIsUndefined", description: "\"oclIsUndefined\"" },
        peg$c39 = "mod",
        peg$c40 = { type: "literal", value: "mod", description: "\"mod\"" },
        peg$c41 = "div",
        peg$c42 = { type: "literal", value: "div", description: "\"div\"" },
        peg$c43 = "abs",
        peg$c44 = { type: "literal", value: "abs", description: "\"abs\"" },
        peg$c45 = "max",
        peg$c46 = { type: "literal", value: "max", description: "\"max\"" },
        peg$c47 = "min",
        peg$c48 = { type: "literal", value: "min", description: "\"min\"" },
        peg$c49 = "round",
        peg$c50 = { type: "literal", value: "round", description: "\"round\"" },
        peg$c51 = "floor",
        peg$c52 = { type: "literal", value: "floor", description: "\"floor\"" },
        peg$c53 = "concat",
        peg$c54 = { type: "literal", value: "concat", description: "\"concat\"" },
        peg$c55 = "size",
        peg$c56 = { type: "literal", value: "size", description: "\"size\"" },
        peg$c57 = "toLower",
        peg$c58 = { type: "literal", value: "toLower", description: "\"toLower\"" },
        peg$c59 = "toUpper",
        peg$c60 = { type: "literal", value: "toUpper", description: "\"toUpper\"" },
        peg$c61 = "toInteger",
        peg$c62 = { type: "literal", value: "toInteger", description: "\"toInteger\"" },
        peg$c63 = "toReal",
        peg$c64 = { type: "literal", value: "toReal", description: "\"toReal\"" },
        peg$c65 = "substring",
        peg$c66 = { type: "literal", value: "substring", description: "\"substring\"" },
        peg$c67 = function(functionName) { return functionName; },
        peg$c68 = "asSet",
        peg$c69 = { type: "literal", value: "asSet", description: "\"asSet\"" },
        peg$c70 = "asOrderedSet",
        peg$c71 = { type: "literal", value: "asOrderedSet", description: "\"asOrderedSet\"" },
        peg$c72 = "asBag",
        peg$c73 = { type: "literal", value: "asBag", description: "\"asBag\"" },
        peg$c74 = "asSequence",
        peg$c75 = { type: "literal", value: "asSequence", description: "\"asSequence\"" },
        peg$c76 = "flatten",
        peg$c77 = { type: "literal", value: "flatten", description: "\"flatten\"" },
        peg$c78 = "includesAll",
        peg$c79 = { type: "literal", value: "includesAll", description: "\"includesAll\"" },
        peg$c80 = "excludesAll",
        peg$c81 = { type: "literal", value: "excludesAll", description: "\"excludesAll\"" },
        peg$c82 = "isEmpty",
        peg$c83 = { type: "literal", value: "isEmpty", description: "\"isEmpty\"" },
        peg$c84 = "notEmpty",
        peg$c85 = { type: "literal", value: "notEmpty", description: "\"notEmpty\"" },
        peg$c86 = "sum",
        peg$c87 = { type: "literal", value: "sum", description: "\"sum\"" },
        peg$c88 = "count",
        peg$c89 = { type: "literal", value: "count", description: "\"count\"" },
        peg$c90 = "includes",
        peg$c91 = { type: "literal", value: "includes", description: "\"includes\"" },
        peg$c92 = "excludes",
        peg$c93 = { type: "literal", value: "excludes", description: "\"excludes\"" },
        peg$c94 = "first",
        peg$c95 = { type: "literal", value: "first", description: "\"first\"" },
        peg$c96 = "last",
        peg$c97 = { type: "literal", value: "last", description: "\"last\"" },
        peg$c98 = "at",
        peg$c99 = { type: "literal", value: "at", description: "\"at\"" },
        peg$c100 = "indexOf",
        peg$c101 = { type: "literal", value: "indexOf", description: "\"indexOf\"" },
        peg$c102 = "union",
        peg$c103 = { type: "literal", value: "union", description: "\"union\"" },
        peg$c104 = "intersection",
        peg$c105 = { type: "literal", value: "intersection", description: "\"intersection\"" },
        peg$c106 = "symmetricDifference",
        peg$c107 = { type: "literal", value: "symmetricDifference", description: "\"symmetricDifference\"" },
        peg$c108 = "including",
        peg$c109 = { type: "literal", value: "including", description: "\"including\"" },
        peg$c110 = "excluding",
        peg$c111 = { type: "literal", value: "excluding", description: "\"excluding\"" },
        peg$c112 = "subSequence",
        peg$c113 = { type: "literal", value: "subSequence", description: "\"subSequence\"" },
        peg$c114 = "subOrderedSet",
        peg$c115 = { type: "literal", value: "subOrderedSet", description: "\"subOrderedSet\"" },
        peg$c116 = "append",
        peg$c117 = { type: "literal", value: "append", description: "\"append\"" },
        peg$c118 = "prepend",
        peg$c119 = { type: "literal", value: "prepend", description: "\"prepend\"" },
        peg$c120 = "insertAt",
        peg$c121 = { type: "literal", value: "insertAt", description: "\"insertAt\"" },
        peg$c122 = function(self, path, args) { 
            return {
                termType: "navigation",
                pathElements: path,
                args: args,
                pathType: self === null ? undefined : "attribute"
             }
        },
        peg$c123 = function() {
                return {
                    termType: "navigation",
                    pathElements: [],
                    args: [],
                    pathType: "instance"
                }
            },
        peg$c124 = function(args) { return args === null ? [] : args; },
        peg$c125 = function(first, expr) { return expr; },
        peg$c126 = "iterate",
        peg$c127 = { type: "literal", value: "iterate", description: "\"iterate\"" },
        peg$c128 = function(first, other) {
            return {
                termType: "let", 
                letExprElements: [first].concat(other)
            }
        },
        peg$c129 = function(first, other) { return [first].concat(other) },
        peg$c130 = function(expression) { return expression; },
        peg$c131 = function(literal) {
            literal.termType = "literal";
            return literal;
        },
        peg$c132 = function(enumName, value) {
            return {
                literalType: "enumeration",
                enumName: enumName,
                value: value
            }
        },
        peg$c133 = function(typeDefinition) {
            return {
                literalType: "type",
                typeDefinition: typeDefinition
            }
        },
        peg$c134 = function(collectionType, items) {
            return {
                literalType: "collection",
                collectionType: collectionType,
                items: items
            }
        },
        peg$c135 = function(first, part) { return part; },
        peg$c136 = function(first, last) {
            return {
                partType: "range",
                first: first,
                last: last
            }
        },
        peg$c137 = function(variableList) {
            return {
                literalType: "tuple",
                variableList: variableList
            }
        },
        peg$c138 = function(firstVar, variable) { return variable; },
        peg$c139 = function(firstVar, otherVars) {
            return [firstVar].concat(otherVars);
        },
        peg$c140 = function(name, type) { return type },
        peg$c141 = function(name, typeDefinition, expression) { return expression },
        peg$c142 = function(name, typeDefinition, initExpression) {
            return {
                variableName: name,
                typeDefinition: typeDefinition,
                initExpression: initExpression
            }
        },
        peg$c143 = function() {
            return {
                literalType: "null"
            }
        },
        peg$c144 = function() {
            return {
                literalType: "invalid"
            }
        },
        peg$c145 = function(value) {
            return {
                literalType: "string",
                value: value
            }
        },
        peg$c146 = "*",
        peg$c147 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c148 = function(value) {
            return {
                literalType: "number",
                value: value === '*' ? "infinity" : value
            }
        },
        peg$c149 = function(value) {
            return {
                literalType: "boolean",
                value: value
            }
        },
        peg$c150 = function(typeDef) {
            typeDef.termType = "typeDefinition";
            return typeDef;
        },
        peg$c151 = function(name) {
            return {
                typeClass: "primitiveType",
                name: name
            }
        },
        peg$c152 = function(pathname) {
            return {
                typeClass: "pathname",
                pathname: pathname
            }
        },
        peg$c153 = function(name) {
            return {
                typeClass: "oclType",
                name: name
            }
        },
        peg$c154 = function(name, itemType) {
            return {
                typeClass: "collectionType",
                name: name,
                itemType: itemType
            }
        },
        peg$c155 = function(variables) {
            return {
                typeClass: "tupleType",
                variables: variables === null ? [] : variables
            }
        },
        peg$c156 = "let",
        peg$c157 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c158 = "in",
        peg$c159 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c160 = "Set",
        peg$c161 = { type: "literal", value: "Set", description: "\"Set\"" },
        peg$c162 = function() { return "Set"; },
        peg$c163 = "Bag",
        peg$c164 = { type: "literal", value: "Bag", description: "\"Bag\"" },
        peg$c165 = function() { return "Bag"; },
        peg$c166 = "Sequence",
        peg$c167 = { type: "literal", value: "Sequence", description: "\"Sequence\"" },
        peg$c168 = function() { return "Sequence"; },
        peg$c169 = "Collection",
        peg$c170 = { type: "literal", value: "Collection", description: "\"Collection\"" },
        peg$c171 = function() { return "Collection"; },
        peg$c172 = "OrderedSet",
        peg$c173 = { type: "literal", value: "OrderedSet", description: "\"OrderedSet\"" },
        peg$c174 = function() { return "OrderedSet"; },
        peg$c175 = "OclAny",
        peg$c176 = { type: "literal", value: "OclAny", description: "\"OclAny\"" },
        peg$c177 = function() { return "OclAny"; },
        peg$c178 = "OclInvalid",
        peg$c179 = { type: "literal", value: "OclInvalid", description: "\"OclInvalid\"" },
        peg$c180 = function() { return "OclInvalid"; },
        peg$c181 = "OclVoid",
        peg$c182 = { type: "literal", value: "OclVoid", description: "\"OclVoid\"" },
        peg$c183 = function() { return "OclVoid"; },
        peg$c184 = "Boolean",
        peg$c185 = { type: "literal", value: "Boolean", description: "\"Boolean\"" },
        peg$c186 = function() { return "Boolean"; },
        peg$c187 = "Integer",
        peg$c188 = { type: "literal", value: "Integer", description: "\"Integer\"" },
        peg$c189 = function() { return "Integer"; },
        peg$c190 = "Real",
        peg$c191 = { type: "literal", value: "Real", description: "\"Real\"" },
        peg$c192 = function() { return "Real"; },
        peg$c193 = "String",
        peg$c194 = { type: "literal", value: "String", description: "\"String\"" },
        peg$c195 = function() { return "String"; },
        peg$c196 = "UnlimitedNatural",
        peg$c197 = { type: "literal", value: "UnlimitedNatural", description: "\"UnlimitedNatural\"" },
        peg$c198 = function() { return  "UnlimitedNatural"; },
        peg$c199 = "Tuple",
        peg$c200 = { type: "literal", value: "Tuple", description: "\"Tuple\"" },
        peg$c201 = "null",
        peg$c202 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c203 = "invalid",
        peg$c204 = { type: "literal", value: "invalid", description: "\"invalid\"" },
        peg$c205 = "if",
        peg$c206 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c207 = "then",
        peg$c208 = { type: "literal", value: "then", description: "\"then\"" },
        peg$c209 = "else",
        peg$c210 = { type: "literal", value: "else", description: "\"else\"" },
        peg$c211 = "endif",
        peg$c212 = { type: "literal", value: "endif", description: "\"endif\"" },
        peg$c213 = "package",
        peg$c214 = { type: "literal", value: "package", description: "\"package\"" },
        peg$c215 = "endpackage",
        peg$c216 = { type: "literal", value: "endpackage", description: "\"endpackage\"" },
        peg$c217 = "context",
        peg$c218 = { type: "literal", value: "context", description: "\"context\"" },
        peg$c219 = "pre",
        peg$c220 = { type: "literal", value: "pre", description: "\"pre\"" },
        peg$c221 = function() { return "pre"; },
        peg$c222 = "post",
        peg$c223 = { type: "literal", value: "post", description: "\"post\"" },
        peg$c224 = function() { return "post"; },
        peg$c225 = "inv",
        peg$c226 = { type: "literal", value: "inv", description: "\"inv\"" },
        peg$c227 = function() { return "inv"; },
        peg$c228 = "body",
        peg$c229 = { type: "literal", value: "body", description: "\"body\"" },
        peg$c230 = function() { return "body"; },
        peg$c231 = "derive",
        peg$c232 = { type: "literal", value: "derive", description: "\"derive\"" },
        peg$c233 = function() { return "derive"; },
        peg$c234 = "self",
        peg$c235 = { type: "literal", value: "self", description: "\"self\"" },
        peg$c236 = "true",
        peg$c237 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c238 = function() { return "true"; },
        peg$c239 = "false",
        peg$c240 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c241 = function() { return "false"; },
        peg$c242 = "|",
        peg$c243 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c244 = "..",
        peg$c245 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c246 = "->",
        peg$c247 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c248 = ",",
        peg$c249 = { type: "literal", value: ",", description: "\",\"" },
        peg$c250 = "::",
        peg$c251 = { type: "literal", value: "::", description: "\"::\"" },
        peg$c252 = ":",
        peg$c253 = { type: "literal", value: ":", description: "\":\"" },
        peg$c254 = ";",
        peg$c255 = { type: "literal", value: ";", description: "\";\"" },
        peg$c256 = "@pre",
        peg$c257 = { type: "literal", value: "@pre", description: "\"@pre\"" },
        peg$c258 = ".",
        peg$c259 = { type: "literal", value: ".", description: "\".\"" },
        peg$c260 = "not",
        peg$c261 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c262 = "/",
        peg$c263 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c264 = "-",
        peg$c265 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c266 = "+",
        peg$c267 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c268 = "<",
        peg$c269 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c270 = ">",
        peg$c271 = { type: "literal", value: ">", description: "\">\"" },
        peg$c272 = "<=",
        peg$c273 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c274 = ">=",
        peg$c275 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c276 = "=",
        peg$c277 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c278 = "<>",
        peg$c279 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c280 = "and",
        peg$c281 = { type: "literal", value: "and", description: "\"and\"" },
        peg$c282 = "or",
        peg$c283 = { type: "literal", value: "or", description: "\"or\"" },
        peg$c284 = "xor",
        peg$c285 = { type: "literal", value: "xor", description: "\"xor\"" },
        peg$c286 = "implies",
        peg$c287 = { type: "literal", value: "implies", description: "\"implies\"" },
        peg$c288 = "(",
        peg$c289 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c290 = ")",
        peg$c291 = { type: "literal", value: ")", description: "\")\"" },
        peg$c292 = "{",
        peg$c293 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c294 = "}",
        peg$c295 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c296 = "'",
        peg$c297 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c298 = /^[^']/,
        peg$c299 = { type: "class", value: "[^']", description: "[^']" },
        peg$c300 = function(value) { 
            return value.join("");
        },
        peg$c301 = "\"",
        peg$c302 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c303 = /^[^"]/,
        peg$c304 = { type: "class", value: "[^\"]", description: "[^\"]" },
        peg$c305 = function(value) { 
                return value.join("");
        },
        peg$c306 = function(wholePart, decimalPart) { return decimalPart.join(""); },
        peg$c307 = function(wholePart, decimalPart) { 
            var number = wholePart.join("");
            if(decimalPart !== null) {
                number += "." + decimalPart;
            }
            return number;
        },
        peg$c308 = function(first, other) { return first + other.join(""); },
        peg$c309 = /^[A-Za-z_]/,
        peg$c310 = { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
        peg$c311 = /^[0-9]/,
        peg$c312 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c313 = /^[ \n\r\t]/,
        peg$c314 = { type: "class", value: "[ \\n\\r\\t]", description: "[ \\n\\r\\t]" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseOCL() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsepackage();
        if (s3 === peg$FAILED) {
          s3 = peg$parsecontext();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsepackage();
            if (s3 === peg$FAILED) {
              s3 = peg$parsecontext();
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepackage() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwPackage();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseelementPath();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsecontext();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsecontext();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsekwEndPackage();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c1(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseelementPath() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopDoubleColon();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c2(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopDoubleColon();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c2(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontext() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsecontextHeading();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseoclRule();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseoclRule();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontextHeading() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwContext();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseelementPath();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoperationDeclaration();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoperationDeclaration() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseopLParen();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseparameterList();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopRParen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c6(s3);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopColon();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparameterList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseparamDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseparamDeclaration();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c8(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseparamDeclaration();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c8(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseparamDeclaration() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopColon();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c10(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontextName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopColon();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoclRule() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseoclRuleType();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseopColon();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoclExpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12(s1, s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoclRuleType() {
      var s0;

      s0 = peg$parsekwPrecondition();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwPostcondition();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwInvariant();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekwBody();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekwDerive();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseoclExpression() {
      var s0;

      s0 = peg$parseletExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseloopExpression();
        if (s0 === peg$FAILED) {
          s0 = peg$parsensExpr0();
        }
      }

      return s0;
    }

    function peg$parsensExpr0() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsensExpr1();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr0_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsensExpr0_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopImplies();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr1();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsensExpr1();
        if (s0 === peg$FAILED) {
          s0 = null;
        }
      }

      return s0;
    }

    function peg$parsensExpr1() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsensExpr2();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr1_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsensExpr1_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopAnd();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr2();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c15(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopOr();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr2();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopXor();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsensExpr2();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c17(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsensExpr2();
            if (s0 === peg$FAILED) {
              s0 = null;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsensExpr2() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsensExpr3();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr2_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsensExpr2_() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseopEqual();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr3();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopNotEqual();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr3();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c19(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsensExpr3();
          if (s0 === peg$FAILED) {
            s0 = null;
          }
        }
      }

      return s0;
    }

    function peg$parsensExpr3() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsensExpr3a();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr3_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsensExpr3_() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseopNotEqual();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopLess();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr3a();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopGreater();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr3a();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopLessOrEqual();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsensExpr3a();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c22(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseopGreaterOrEqual();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsensExpr3a();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c23(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$parsensExpr3a();
              if (s0 === peg$FAILED) {
                s0 = null;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsensExpr3a() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsekwIf();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoclExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsekwThen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseoclExpression();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsekwElse();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseoclExpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsekwEndIf();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c24(s2, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsensExpr4();
        if (s0 === peg$FAILED) {
          s0 = null;
        }
      }

      return s0;
    }

    function peg$parsensExpr4() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopMinus();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr7();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr4_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsensExpr5();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr4_();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsensExpr4_() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopPlus();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr5();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr4_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c26(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopMinus();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr5();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsensExpr4_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsensExpr5();
          if (s0 === peg$FAILED) {
            s0 = null;
          }
        }
      }

      return s0;
    }

    function peg$parsensExpr5() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsensExpr6();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr5_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsensExpr5_() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopMult();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr6();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsensExpr5_();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c28(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopDiv();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsensExpr6();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsensExpr5_();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsensExpr6();
          if (s0 === peg$FAILED) {
            s0 = null;
          }
        }
      }

      return s0;
    }

    function peg$parsensExpr6() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseopNot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsensExpr7();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseopLParen();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseopMinus();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsensExpr7();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseopRParen();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c31(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsensExpr7();
        }
      }

      return s0;
    }

    function peg$parsensExpr7() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseopLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoclExpression();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseopRParen();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsebuiltInFunctionChain();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseexpressionLiteral();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsebuiltInFunctionChain();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c33(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseexpressionLiteral() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseliteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenavigation();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebuiltInFunctionChain() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parseopDot();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsebuiltInFunctionNames();
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseopSlimArrow();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecollectionFunctionNames();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = void 0;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsebuiltInFunction();
        if (s3 === peg$FAILED) {
          s3 = peg$parsecollectionFunction();
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsebuiltInFunction();
            if (s3 === peg$FAILED) {
              s3 = peg$parsecollectionFunction();
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebuiltInFunction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopDot();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsebuiltInFunctionNames();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemethodArguments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecollectionFunction() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopSlimArrow();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecollectionFunctionNames();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemethodArguments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebuiltInFunctionNames() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c37) {
        s1 = peg$c37;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c39) {
          s1 = peg$c39;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c43) {
              s1 = peg$c43;
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c45) {
                s1 = peg$c45;
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c47) {
                  s1 = peg$c47;
                  peg$currPos += 3;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c49) {
                    s1 = peg$c49;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c51) {
                      s1 = peg$c51;
                      peg$currPos += 5;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c52); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 6) === peg$c53) {
                        s1 = peg$c53;
                        peg$currPos += 6;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c54); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c55) {
                          s1 = peg$c55;
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c56); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c57) {
                            s1 = peg$c57;
                            peg$currPos += 7;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c58); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 7) === peg$c59) {
                              s1 = peg$c59;
                              peg$currPos += 7;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c60); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 9) === peg$c61) {
                                s1 = peg$c61;
                                peg$currPos += 9;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c62); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c63) {
                                  s1 = peg$c63;
                                  peg$currPos += 6;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 9) === peg$c65) {
                                    s1 = peg$c65;
                                    peg$currPos += 9;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c66); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecollectionFunctionNames() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c70) {
          s1 = peg$c70;
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c72) {
            s1 = peg$c72;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c74) {
              s1 = peg$c74;
              peg$currPos += 10;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c75); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c76) {
                s1 = peg$c76;
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c77); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c78) {
                  s1 = peg$c78;
                  peg$currPos += 11;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c79); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 11) === peg$c80) {
                    s1 = peg$c80;
                    peg$currPos += 11;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c81); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c82) {
                      s1 = peg$c82;
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 8) === peg$c84) {
                        s1 = peg$c84;
                        peg$currPos += 8;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c85); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c55) {
                          s1 = peg$c55;
                          peg$currPos += 4;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c56); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c86) {
                            s1 = peg$c86;
                            peg$currPos += 3;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c87); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c88) {
                              s1 = peg$c88;
                              peg$currPos += 5;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c89); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 8) === peg$c90) {
                                s1 = peg$c90;
                                peg$currPos += 8;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c91); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 8) === peg$c92) {
                                  s1 = peg$c92;
                                  peg$currPos += 8;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c94) {
                                    s1 = peg$c94;
                                    peg$currPos += 5;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c96) {
                                      s1 = peg$c96;
                                      peg$currPos += 4;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c97); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c98) {
                                        s1 = peg$c98;
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c99); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 7) === peg$c100) {
                                          s1 = peg$c100;
                                          peg$currPos += 7;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 5) === peg$c102) {
                                            s1 = peg$c102;
                                            peg$currPos += 5;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 12) === peg$c104) {
                                              s1 = peg$c104;
                                              peg$currPos += 12;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 19) === peg$c106) {
                                                s1 = peg$c106;
                                                peg$currPos += 19;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 9) === peg$c108) {
                                                  s1 = peg$c108;
                                                  peg$currPos += 9;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 9) === peg$c110) {
                                                    s1 = peg$c110;
                                                    peg$currPos += 9;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 11) === peg$c112) {
                                                      s1 = peg$c112;
                                                      peg$currPos += 11;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 13) === peg$c114) {
                                                        s1 = peg$c114;
                                                        peg$currPos += 13;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 6) === peg$c116) {
                                                          s1 = peg$c116;
                                                          peg$currPos += 6;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 7) === peg$c118) {
                                                            s1 = peg$c118;
                                                            peg$currPos += 7;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 8) === peg$c120) {
                                                              s1 = peg$c120;
                                                              peg$currPos += 8;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenavigation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsekwSelf();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseopDot();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenavigationPath();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemethodArguments();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c122(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsekwSelf();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c123();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsenavigationPath() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopDot();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseidentifier();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c2(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopDot();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c2(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemethodArguments() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopLParen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseargumentList();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseopRParen();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c124(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseargumentList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseoclExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseoclExpression();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c125(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoclExpression();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c125(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevariableExpression() {
      var s0;

      s0 = peg$parsekwSelf();
      if (s0 === peg$FAILED) {
        s0 = peg$parseidentifier();
      }

      return s0;
    }

    function peg$parseloopExpression() {
      var s0;

      s0 = peg$parseiteratorExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseiterateExpression();
      }

      return s0;
    }

    function peg$parseiteratorExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsensExpr0();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopSlimArrow();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopLParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseiteratee();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseopRParen();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseiteratee() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parsevariableDeclaration();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsevariableDeclaration();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseopVerticalLine();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoclExpression();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseiterateExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsensExpr0();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopSlimArrow();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c126) {
            s3 = peg$c126;
            peg$currPos += 7;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c127); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopLParen();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsevariableDeclaration();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseopSemiColon();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsevariableDeclaration();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseopVerticalLine();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseoclExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseopRParen();
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseletExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsekwLet();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevariableDeclaration();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseletExpressionSub();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c128(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseletExpressionSub() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseopComma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsevariableDeclaration();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseletExpressionSub();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c129(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsekwIn();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseoclExpression();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c130(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseliteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseprimitiveLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetupleLiteral();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecollectionLiteral();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetypeLiteral();
            if (s1 === peg$FAILED) {
              s1 = peg$parseenumLiteral();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c131(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseenumLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsepathName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopDoubleColon();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c132(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetypeLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsetypeDefinition();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c133(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecollectionLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecollectionTypeIdent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopLBrace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecollectionLiteralParts();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopRBrace();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c134(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecollectionLiteralParts() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecolletionLiteralPart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecolletionLiteralPart();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c135(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecolletionLiteralPart();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c135(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecolletionLiteralPart() {
      var s0;

      s0 = peg$parsecollectionRange();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoclExpression();
      }

      return s0;
    }

    function peg$parsecollectionRange() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseoclExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopDoubleDot();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoclExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c136(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetupleLiteral() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwTuple();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopLBrace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevariableDeclarationList();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopRBrace();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c137(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevariableDeclarationList() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsevariableDeclaration();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseopComma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsevariableDeclaration();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c138(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseopComma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsevariableDeclaration();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c138(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c139(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevariableDeclaration() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseopColon();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsetypeDefinition();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c140(s1, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseopEqual();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoclExpression();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c141(s1, s2, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c142(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseprimitiveLiteral() {
      var s0;

      s0 = peg$parsebooleanLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumberLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestringLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenullLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseinvalidLiteral();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenullLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekwNull();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c143();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinvalidLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekwInvalid();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c144();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestringLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsestringInQuotes();
      if (s1 === peg$FAILED) {
        s1 = peg$parsestringInDoubleQuotes();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c145(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumberLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c146;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c148(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebooleanLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekwTrue();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekwFalse();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c149(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsetypeDefinition() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsepathName();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecollectionType();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetupleType();
          if (s1 === peg$FAILED) {
            s1 = peg$parseprimitiveType();
            if (s1 === peg$FAILED) {
              s1 = peg$parseoclType();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c150(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseprimitiveType() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekwBoolean();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekwString();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekwInteger();
          if (s1 === peg$FAILED) {
            s1 = peg$parsekwReal();
            if (s1 === peg$FAILED) {
              s1 = peg$parsekwUnlimitedNatural();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c151(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepathName() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenavigation();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c152(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseoclType() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsekwOclAny();
      if (s1 === peg$FAILED) {
        s1 = peg$parsekwOclInvalid();
        if (s1 === peg$FAILED) {
          s1 = peg$parsekwOclVoid();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c153(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsecollectionType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecollectionTypeIdent();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetypeDefinition();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopRParen();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c154(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecollectionTypeIdent() {
      var s0;

      s0 = peg$parsekwBag();
      if (s0 === peg$FAILED) {
        s0 = peg$parsekwSet();
        if (s0 === peg$FAILED) {
          s0 = peg$parsekwOrderedSet();
          if (s0 === peg$FAILED) {
            s0 = peg$parsekwCollection();
            if (s0 === peg$FAILED) {
              s0 = peg$parsekwSequence();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetupleType() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsekwTuple();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseopLParen();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsevariableDeclarationList();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseopRParen();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c155(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekeyword() {
      var s0;

      s0 = peg$parseopNot();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopAnd();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopOr();
          if (s0 === peg$FAILED) {
            s0 = peg$parseopXor();
            if (s0 === peg$FAILED) {
              s0 = peg$parseopImplies();
              if (s0 === peg$FAILED) {
                s0 = peg$parsekwContext();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsekwEndPackage();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsekwPackage();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsekwTrue();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsekwFalse();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsekwSelf();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsekwPrecondition();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsekwPostcondition();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsekwInvariant();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsekwBody();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsekwDerive();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsekwIf();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsekwThen();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsekwElse();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsekwEndIf();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsekwNull();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parsekwInvalid();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsekwTuple();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsekwBoolean();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsekwInteger();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parsekwReal();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsekwString();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsekwUnlimitedNatural();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parsekwOclAny();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parsekwOclInvalid();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsekwOclVoid();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parsekwSet();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsekwBag();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parsekwSequence();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parsekwCollection();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsekwOrderedSet();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parsekwLet();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parsekwIn();
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekwLet() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c156) {
        s1 = peg$c156;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c157); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwIn() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c158) {
        s1 = peg$c158;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSet() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c160) {
        s1 = peg$c160;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c162();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwBag() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c163) {
        s1 = peg$c163;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c165();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSequence() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c166) {
        s1 = peg$c166;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c167); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c168();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwCollection() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c169) {
        s1 = peg$c169;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c171();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOrderedSet() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c172) {
        s1 = peg$c172;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c174();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOclAny() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c175) {
        s1 = peg$c175;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c176); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c177();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOclInvalid() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c178) {
        s1 = peg$c178;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c179); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c180();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwOclVoid() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c181) {
        s1 = peg$c181;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c182); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c183();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwBoolean() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c184) {
        s1 = peg$c184;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c186();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwInteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c187) {
        s1 = peg$c187;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c189();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwReal() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c190) {
        s1 = peg$c190;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c192();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwString() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c193) {
        s1 = peg$c193;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c194); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c195();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwUnlimitedNatural() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c196) {
        s1 = peg$c196;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c197); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c198();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwTuple() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c199) {
        s1 = peg$c199;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c200); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwNull() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c201) {
        s1 = peg$c201;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c202); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwInvalid() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c203) {
        s1 = peg$c203;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c204); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwIf() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c205) {
        s1 = peg$c205;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c206); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwThen() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c207) {
        s1 = peg$c207;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c208); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwElse() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c209) {
        s1 = peg$c209;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c210); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwEndIf() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c211) {
        s1 = peg$c211;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPackage() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c213) {
        s1 = peg$c213;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c214); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwEndPackage() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c215) {
        s1 = peg$c215;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c216); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwContext() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c217) {
        s1 = peg$c217;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c218); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPrecondition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c219) {
        s1 = peg$c219;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c220); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c221();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwPostcondition() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c222) {
        s1 = peg$c222;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c224();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwInvariant() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c225) {
        s1 = peg$c225;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c227();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwBody() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c228) {
        s1 = peg$c228;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c229); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c230();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwDerive() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c231) {
        s1 = peg$c231;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c233();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwSelf() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c234) {
        s1 = peg$c234;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c235); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwTrue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c236) {
        s1 = peg$c236;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c238();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsekwFalse() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c239) {
        s1 = peg$c239;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c240); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseKW_SEP();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c241();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseKW_SEP() {
      var s0, s1;

      s0 = peg$parse__();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$silentFails++;
        s1 = peg$parseoperator();
        peg$silentFails--;
        if (s1 !== peg$FAILED) {
          peg$currPos = s0;
          s0 = void 0;
        } else {
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseoperator() {
      var s0;

      s0 = peg$parseopArrow();
      if (s0 === peg$FAILED) {
        s0 = peg$parseopNot();
        if (s0 === peg$FAILED) {
          s0 = peg$parseopMult();
          if (s0 === peg$FAILED) {
            s0 = peg$parseopDiv();
            if (s0 === peg$FAILED) {
              s0 = peg$parseopMinus();
              if (s0 === peg$FAILED) {
                s0 = peg$parseopPlus();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseopLess();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseopGreater();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseopLessOrEqual();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseopGreaterOrEqual();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseopEqual();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseopNotEqual();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseopAnd();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseopOr();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseopXor();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseopImplies();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseopDoubleColon();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseopColon();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseopSlimArrow();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseopLBrace();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseopRBrace();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseopDoubleDot();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseopDot();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseopVerticalLine();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseopSemiColon();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseopVerticalLine() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c242;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c243); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDoubleDot() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c244) {
        s1 = peg$c244;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c245); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopSlimArrow() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c246) {
        s1 = peg$c246;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopComma() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c248;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c249); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDoubleColon() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c250) {
        s1 = peg$c250;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c251); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopColon() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c252;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c253); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopSemiColon() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c254;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c255); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopPrevValue() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c256) {
        s1 = peg$c256;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c257); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDot() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c258;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c259); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopArrow() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c246) {
        s1 = peg$c246;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c247); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopNot() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c260) {
        s1 = peg$c260;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c261); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopMult() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c146;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c147); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopDiv() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c262;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c263); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopMinus() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c264;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c265); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopPlus() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c266;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c267); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLess() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c268;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c269); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopGreater() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c270;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c271); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLessOrEqual() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c272) {
        s1 = peg$c272;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c273); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopGreaterOrEqual() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c274) {
        s1 = peg$c274;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopEqual() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 61) {
        s1 = peg$c276;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c277); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopNotEqual() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c278) {
        s1 = peg$c278;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c279); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopAnd() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c280) {
        s1 = peg$c280;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c281); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopOr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c282) {
        s1 = peg$c282;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c283); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopXor() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c284) {
        s1 = peg$c284;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c285); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopImplies() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c286) {
        s1 = peg$c286;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLParen() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c288;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c289); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopRParen() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 41) {
        s1 = peg$c290;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c291); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopLBrace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c292;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c293); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseopRBrace() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 125) {
        s1 = peg$c294;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c295); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestringInQuotes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c296;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c297); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c298.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c299); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c298.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c299); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c296;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c297); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c300(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsestringInDoubleQuotes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c301;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c303.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c303.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c304); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c301;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c302); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c305(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsedigit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsedigit();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c258;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c259); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsedigit();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsedigit();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c306(s1, s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c307(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsereservedWords() {
      var s0, s1, s2;

      s0 = peg$parsekeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebuiltInFunctionNames();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseopSlimArrow();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsecollectionFunctionNames();
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parsereservedWords();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseletter();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsedigit();
          if (s4 === peg$FAILED) {
            s4 = peg$parseletter();
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsedigit();
            if (s4 === peg$FAILED) {
              s4 = peg$parseletter();
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c308(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseletter() {
      var s0;

      if (peg$c309.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0;

      if (peg$c311.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c312); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (peg$c313.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c313.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c314); }
        }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      if (peg$c313.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c313.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c314); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }


        function attachLeft(left, term) {
            if(term === null) {
                return left;
            }  else { 
                term.left = left; 
                return term; 
            }
        }

        function binOp(operatorName, term, subtree) {
            var right = term;
            if(subtree !== null) {
                subtree.left = term;
                right = subtree;
            } 
            return {
                operator: operatorName,
                left: undefined,
                right: right
            };
        }


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
